name: Deploy GitOps Semgrep

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment (dev/beta/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - beta
        - prod
      semgrep_token:
        description: 'Semgrep App Token (optional)'
        required: false
        type: string

jobs:
  deploy-semgrep:
    runs-on: arc-runner-set

    env:
      ENV: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Ensure Helm is available and matches local version
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.15.4'

      # Ensure kubectl is available and matches local client version
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.5'
        
      # Ensure Helm is available and matches local version
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.15.4'

      # Ensure kubectl is available and matches local client version
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.5'

      # Parse issue content for environment and token
      - name: Parse issue content
        id: parse
        run: |
          echo "🔍 Parsing issue content..."

          # Extract environment from issue body or use workflow input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            SEMGREP_TOKEN="${{ github.event.inputs.semgrep_token }}"
          else
            ENVIRONMENT=$(echo '${{ github.event.issue.body }}' | grep -i "environment" -A 5 | grep -E "(dev|beta|prod)" | head -1 | tr -d '[:space:]' || echo "dev")
            SEMGREP_TOKEN=$(echo '${{ github.event.issue.body }}' | grep -i "semgrep.*token" -A 2 | grep -v "token.*here" | grep -E "semgrep_[a-zA-Z0-9]+" | head -1 | tr -d '[:space:]' || echo "")
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "semgrep_token=${SEMGREP_TOKEN}" >> $GITHUB_OUTPUT

          echo "📋 Parsed values:"
          echo "  Environment: ${ENVIRONMENT}"
          if [ -n "${SEMGREP_TOKEN}" ]; then
            echo "  Semgrep Token: ***provided***"
          else
            echo "  Semgrep Token: not provided"
          fi

      # Set namespace dynamically based on environment
      - name: Set Namespace
        id: set-namespace
        run: echo "NAMESPACE=semgrep-${{ steps.parse.outputs.environment }}" >> $GITHUB_ENV

      # Create namespace if it doesn't already exist
      - name: Create namespace if not exists
        run: |
          kubectl get ns ${{ env.NAMESPACE }} || kubectl create ns ${{ env.NAMESPACE }}
          
      - name: Add deployment comment
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🚀 Deployment Started
            
            **Configuration:**
            - Environment: \`${{ steps.parse.outputs.environment }}\`
            - Scan Target: \`${{ steps.parse.outputs.scan_target }}\`
            - Semgrep Token: ${{ steps.parse.outputs.semgrep_token != '' && '✅ Provided' || '❌ Not provided (basic scan)' }}
            
            **Status:** 🔄 Deploying...
            
            You can monitor the deployment progress in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Verify runner environment
        run: |
          echo "🎉 Running on ARC self-hosted runner!"
          echo "Runner name: $RUNNER_NAME"
          echo "Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          

          
      # Deploy Semgrep with Helm using environment-specific values
      - name: Deploy Semgrep with Helm
        shell: bash
        run: |
          echo "Deploying to environment: ${{ steps.parse.outputs.environment }}"
          case "${{ steps.parse.outputs.environment }}" in
            dev)
              if [ -n "${{ steps.parse.outputs.semgrep_token }}" ]; then
                helm upgrade --install semgrep-scan ./k8s-jobs \
                  -f environments/dev/values.yaml \
                  --set semgrep.token="${{ steps.parse.outputs.semgrep_token }}" \
                  -n ${{ env.NAMESPACE }}
              else
                helm upgrade --install semgrep-scan ./k8s-jobs \
                  -f environments/dev/values.yaml \
                  -n ${{ env.NAMESPACE }}
              fi
              ;;
            beta)
              if [ -n "${{ steps.parse.outputs.semgrep_token }}" ]; then
                helm upgrade --install semgrep-scan ./k8s-jobs \
                  -f environments/beta/values.yaml \
                  --set semgrep.token="${{ steps.parse.outputs.semgrep_token }}" \
                  -n ${{ env.NAMESPACE }}
              else
                helm upgrade --install semgrep-scan ./k8s-jobs \
                  -f environments/beta/values.yaml \
                  -n ${{ env.NAMESPACE }}
              fi
              ;;
            prod)
              if [ -n "${{ steps.parse.outputs.semgrep_token }}" ]; then
                helm upgrade --install semgrep-scan ./k8s-jobs \
                  -f environments/prod/values.yaml \
                  --set semgrep.token="${{ steps.parse.outputs.semgrep_token }}" \
                  -n ${{ env.NAMESPACE }}
              else
                helm upgrade --install semgrep-scan ./k8s-jobs \
                  -f environments/prod/values.yaml \
                  -n ${{ env.NAMESPACE }}
              fi
              ;;
            *)
              echo "Invalid environment: ${{ steps.parse.outputs.environment }}"
              exit 1
              ;;
          esac
          
      # Wait for Semgrep job to become ready
      - name: Wait for Semgrep Job to be Ready
        run: |
          echo "📋 Checking for Semgrep jobs..."

          # Find the actual job name (could be semgrep-scan or semgrep-scan-once)
          JOB_NAME=$(kubectl get jobs -n ${{ env.NAMESPACE }} -l app=semgrep -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")

          if [ -n "$JOB_NAME" ]; then
            echo "✅ Job found: $JOB_NAME"
            echo "📋 Waiting for job completion..."
            kubectl wait --for=condition=complete job/$JOB_NAME -n ${{ env.NAMESPACE }} --timeout=300s || \
            kubectl wait --for=condition=failed job/$JOB_NAME -n ${{ env.NAMESPACE }} --timeout=10s

            # Store job name for later steps
            echo "JOB_NAME=$JOB_NAME" >> $GITHUB_ENV
          else
            echo "❌ No Semgrep jobs found in namespace ${{ env.NAMESPACE }}"
            echo "📋 Available jobs in namespace:"
            kubectl get jobs -n ${{ env.NAMESPACE }} || echo "No jobs found"
            exit 1
          fi

      # List pods for verification
      - name: List Semgrep Pods
        run: |
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl get jobs -n ${{ env.NAMESPACE }}
          
      # Show access info and logs (only for dev environment using Minikube)
      - name: Get Semgrep Job Logs and Status
        if: always()
        shell: bash
        run: |
          echo "📋 Semgrep Job Status:"
          kubectl get jobs -n ${{ env.NAMESPACE }}
          echo ""
          echo "📋 Semgrep Job Logs:"

          # Use the job name from previous step or find it dynamically
          if [ -n "${{ env.JOB_NAME }}" ]; then
            JOB_NAME="${{ env.JOB_NAME }}"
          else
            JOB_NAME=$(kubectl get jobs -n ${{ env.NAMESPACE }} -l app=semgrep -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "semgrep-scan")
          fi

          echo "📋 Getting logs from job: $JOB_NAME"
          kubectl logs job/$JOB_NAME -n ${{ env.NAMESPACE }} || echo "No logs available yet"

          if [ "${{ steps.parse.outputs.environment }}" = "dev" ]; then
            echo ""
            echo "📋 Minikube Access Info:"
            echo "Namespace: ${{ env.NAMESPACE }}"
            echo "Job Name: $JOB_NAME"
            kubectl get svc -n ${{ env.NAMESPACE }} || echo "No services found"
          fi
          
      - name: Update issue with results
        uses: actions/github-script@v7
        if: github.event_name == 'issues'
        with:
          script: |
            const jobName = '${{ env.JOB_NAME }}' || 'semgrep-scan-once';
            const comment = `## ✅ Semgrep Deployment Completed

            **Environment:** \`${{ steps.parse.outputs.environment }}\`
            **Namespace:** \`${{ env.NAMESPACE }}\`
            **Job Name:** \`${jobName}\`

            ### 🔧 Monitoring Commands:
            \`\`\`bash
            # Check deployment status
            kubectl get jobs -n ${{ env.NAMESPACE }}
            kubectl get pods -n ${{ env.NAMESPACE }}

            # View logs
            kubectl logs job/${jobName} -n ${{ env.NAMESPACE }}

            # Health check
            ./health-check.sh ${{ steps.parse.outputs.environment }}

            # Cleanup when done
            helm uninstall semgrep-scan -n ${{ env.NAMESPACE }}
            \`\`\`

            ---
            *Deployment triggered by issue #${{ github.event.issue.number }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
